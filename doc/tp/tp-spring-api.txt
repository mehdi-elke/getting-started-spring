TP : API REST avec Spring (sans Spring Boot) et Hibernate

Objectif

D√©velopper une API REST permettant de g√©rer des livres avec Spring (sans Spring Boot) et Hibernate. L‚Äôapplication sera packag√©e en WAR et d√©ploy√©e dans un conteneur Tomcat via Docker.
L‚ÄôAPI exposera les op√©rations suivantes :
	‚Ä¢	Cr√©er un livre (POST /api/books)
	‚Ä¢	Mettre √† jour un livre (PUT /api/books/{id})
	‚Ä¢	Supprimer un livre (DELETE /api/books/{id})
	‚Ä¢	Lister tous les livres (GET /api/books)
	‚Ä¢	R√©cup√©rer un livre par son identifiant (GET /api/books/{id})

Dur√©e estim√©e : 3h √† 3h30
Contexte : Application de gestion de biblioth√®que avec stockage en base de donn√©es PostgreSQL.

Pr√©requis
	‚Ä¢	Java 17 ou sup√©rieur
	‚Ä¢	Maven
	‚Ä¢	Docker (pour PostgreSQL + pgAdmin)
	‚Ä¢	Tomcat (le projet g√©n√®re un .war)
	‚Ä¢	Un outil pour tester les appels API : Postman ou Bruno

Structure du projet

    Le projet vous est fourni avec une structure Maven compl√®te. La configuration Spring (XML), l‚Äôencodage, le mapping et la base sont d√©j√† amorc√©s.

üß© √âtape 1 : V√©rification du setup avec un ping

Ouvrez le projet et examinez les fichiers suivants :
	‚Ä¢	src/main/webapp/WEB-INF/web.xml : d√©claration du DispatcherServlet et encodage UTF-8.
	‚Ä¢	applicationContext.xml : configuration g√©n√©rale Spring (scans de packages, beans Hibernate, etc.)
	‚Ä¢	mvc-servlet.xml : configuration sp√©cifique √† la couche web (REST).

‚úÖ Cr√©er un contr√¥leur PingController dans le package controller

@RestController
public class PingController {

    @GetMapping("/ping")
    public String ping() {
        return "OK";
    }
}

	1.	Compilez le projet avec Maven : mvn clean install
	2.	D√©ployez le fichier .war dans Tomcat (via Docker ou localement) et la base de donn√©es: docker-compose up (et docker-compose down -v pour arr√™ter et supprimer les ressources)
	3.	Ins√©rez une donn√©e en db
	4.	Appelez l‚ÄôAPI avec Postman ou Bruno :
	‚Ä¢	GET library-api/api/ping


üõ† √âtape 2 : Impl√©menter le endpoint /books

‚úÖ C√¥t√© model

Cr√©ez la classe Book.java avec les annotations JPA.

‚úÖ C√¥t√© repository

Cr√©ez BookRepository et compl√©tez son impl√©mentation avec l'op√©ration findAll.

‚úÖ C√¥t√© service

Impl√©mentez BookServiceImpl en d√©l√©guant les appels au repository.

‚úÖ C√¥t√© controller

Impl√©mentez les endpoints dans BookController, en utilisant les annotations Spring MVC:
@RestController
@RequestMapping("/books")
@GetMapping


üß™ √âtape 3 : Tester l‚ÄôAPI
	1.	Compilez le projet avec Maven : mvn clean install
	2.	D√©ployez le fichier .war dans Tomcat (via Docker ou localement) et la base de donn√©es: docker-compose up (et docker-compose down -v pour arr√™ter et supprimer les ressources)
	3.	Ins√©rez une donn√©e en db
	4.	Appelez l‚ÄôAPI avec Postman ou Bruno :
	‚Ä¢	GET library-api/api/books

üß© √âtape 4 : Impl√©menter les autres endpoints

Ajoutez les m√©thodes manquantes dans BookController pour :
	‚Ä¢	GET /books/{id}
	‚Ä¢	PUT /books/{id}
	‚Ä¢	DELETE /books/{id}

üßº √âtape 5 : Nettoyage et Bonus
	‚Ä¢	‚úÖ G√©rez les erreurs (ex: 404 si le livre n‚Äôexiste pas)
	‚Ä¢	‚úÖ Ajoutez la validation (ex: @NotBlank sur les champs)
	‚Ä¢	üöÄ Bonus : ajoutez une recherche par auteur (GET /books?author=...)