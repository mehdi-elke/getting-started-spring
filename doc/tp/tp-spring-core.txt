==============================
TP : Premi√®re application Spring (sans Spring Boot)
==============================

Objectif :
----------
Ce TP a pour but de d√©couvrir les bases de Spring Framework sans utiliser Spring Boot. Vous allez cr√©er une petite application de gestion de biblioth√®que en ligne de commande, o√π les d√©pendances sont inject√©es via le conteneur Spring d√©fini en XML.

Dur√©e estim√©e : 2h √† 2h30.

Contexte :
----------
Une biblioth√®que souhaite cr√©er une application pour stocker les livres disponibles. Pour l‚Äôinstant, les livres seront stock√©s en m√©moire (pas de base de donn√©es). Chaque livre aura un titre et un auteur. L'application devra permettre d'ajouter un livre et de lister les livres existants.

Contraintes :
-------------
- Utiliser **Spring sans Spring Boot**
- Toute la configuration doit √™tre faite dans un fichier `applicationContext.xml`
- Aucun framework de persistance ou de web : application **console**
- L‚Äôinjection de d√©pendances doit √™tre faite par **setter** via XML
- La d√©tection automatique des composants (`@Component`, `@Service`, `@Repository`) devra √™tre activ√©e dans un second temps via un `<context:component-scan>` dans le fichier XML
- √âcrire un test unitaire de la couche service √† l‚Äôaide de **JUnit et Mockito**, sans utiliser de contexte Spring

Instructions :
--------------

√âtape 1 : Configuration manuelle des beans
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

1. **Cr√©er une classe `Book`**
   - Attributs : `title`, `author`
   - Ajouter les constructeurs, getters, setters, `toString`

2. **Cr√©er une interface `BookRepository`**
   - M√©thodes : `void save(Book book)` et `List<Book> findAll()`

3. **Impl√©menter `BookRepository` par une classe `InMemoryBookRepository`**
   - Stocker les livres dans une `ArrayList`

4. **Cr√©er une interface `BookService`**
   - M√©thodes : `void addBook(Book book)` et `List<Book> listBooks()`

5. **Cr√©er `BookServiceImpl`**
   - Injecter un `BookRepository` (via setter)
   - Impl√©menter les m√©thodes du service

6. **Cr√©er un fichier `applicationContext.xml`**
   - D√©finir les beans `bookRepository` et `bookService`
   - Injecter les d√©pendances via les balises `<property>`

7. **Cr√©er une classe `MainApp`**
   - Charger le contexte Spring
   - R√©cup√©rer le bean `bookService`
   - Ajouter quelques livres, puis les afficher dans la console

√âtape 2 : Migration vers `component-scan`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

8. Ajouter les annotations `@Repository`, `@Service` sur les impl√©mentations de vos interfaces

9. Activer le **scanning automatique des composants** dans `applicationContext.xml` :

```xml
<context:component-scan base-package="fr.baretto.library" />
```

10. Supprimer la d√©claration manuelle des beans et v√©rifier que l'application fonctionne toujours

11. Ajouter `@Autowired` sur les setters ou constructeurs

√âtape 3 : Ajout d‚Äôun test unitaire avec Mockito
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

12. Cr√©er une classe de test `BookServiceImplTest` dans le r√©pertoire `src/test/java`

13. Utiliser **JUnit 5** et **Mockito** pour :
   - Mock le `BookRepository`
   - V√©rifier que `addBook()` appelle bien la m√©thode `save()` du repository
   - V√©rifier que `listBooks()` retourne bien la liste de livres fournie par le repository mock√©

Fichiers attendus :
-------------------
- `Book.java`
- `BookRepository.java`, `InMemoryBookRepository.java`
- `BookService.java`, `BookServiceImpl.java`
- `MainApp.java`
- `applicationContext.xml`
- `BookServiceImplTest.java`

Bonne chance ! üöÄ